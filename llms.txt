Project Structure:
📁 mkdocs-markdown-in-template-plugin
├── 📁 _temp
│   ├── 📁 jinja-markdown
│   │   ├── 📁 jinja_markdown
│   │   └── 📁 tests
│   └── 📁 mkdocs-markdown-filter
│       └── 📁 mkdocs_markdown_filter
├── 📁 mkdocs_markdown_in_template_plugin
│   ├── 📄 __init__.py
│   └── 📄 plugin.py
├── 📁 mkdocs_markdown_in_template_plugin.egg-info
├── 📄 .gitignore
├── 📄 LICENSE
├── 📄 README.md
├── 📄 requirements.txt
└── 📄 setup.py


<documents>
<document index="1">
<source>.gitignore</source>
<document_content>
.DS_Store
_temp/

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

</document_content>
</document>

<document index="2">
<source>LICENSE</source>
<document_content>
MIT License

Copyright (c) 2022 Adam Twardoch

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

</document_content>
</document>

<document index="3">
<source>README.md</source>
<document_content>
# mkdocs-markdown-in-template-plugin

MkDocs plugin that allows to use Markdown in your theme’s Jinja2 templates

## Installation

```bash
python3 -m pip install git+https://github.com/twardoch/mkdocs-markdown-in-template-plugin
```

## Configuration

In `mkdocs.yaml` (as early as possible in the list of plugins):

```yaml
plugins:
  - markdown-in-template
```

## Usage

In any HTML template partial, you can now include Markdown enclosed in `{% md %}` and `{% mdend %}`:

```html
<article>
{% md %}
# Heading

Regular and **bold** text
{% mdend %}
</article>
```

Note: The plugin will remove any indentation equal to the indentation of the first line of the Markdown.


</document_content>
</document>

# File: /Users/adam/Developer/vcs/github.twardoch/pub/mkdocs-markdown-in-template-plugin/mkdocs_markdown_in_template_plugin/__init__.py
# Language: python



# File: /Users/adam/Developer/vcs/github.twardoch/pub/mkdocs-markdown-in-template-plugin/mkdocs_markdown_in_template_plugin/plugin.py
# Language: python

import textwrap
import typing as t
import markdown
from jinja2 import Environment
from jinja2.ext import Extension
from jinja2.nodes import CallBlock, Node
from jinja2.parser import Parser
from mkdocs.config import Config
from mkdocs.plugins import BasePlugin
from mkdocs.structure.files import Files

class MarkdownJinjaExtension(E, x, t, e, n, s, i, o, n):
    def __init__((self, env: Environment)) -> None:
    def parse((self, parser: Parser)) -> t.Union[Node, t.List[Node]]:
    def _render_markdown((self, caller: t.Callable)) -> str:
    def _dedent((self, text: str)) -> str:

class MarkdownInTemplatePlugin(B, a, s, e, P, l, u, g, i, n):
    def __init__((self)) -> None:
    def on_env((self, env: Environment, config: Config, files: Files)) -> Environment:

def __init__((self, env: Environment)) -> None:

def parse((self, parser: Parser)) -> t.Union[Node, t.List[Node]]:

def _render_markdown((self, caller: t.Callable)) -> str:

def _dedent((self, text: str)) -> str:

def __init__((self)) -> None:

def on_env((self, env: Environment, config: Config, files: Files)) -> Environment:


<document index="4">
<source>requirements.txt</source>
<document_content>
mkdocs>=1.3.0
Jinja2>=3.0.3
Markdown>=3.3.6
</document_content>
</document>

# File: /Users/adam/Developer/vcs/github.twardoch/pub/mkdocs-markdown-in-template-plugin/setup.py
# Language: python

import os
import re
from setuptools import find_packages, setup

def get_absolute_path((*args)):
    """Transform relative pathnames into absolute pathnames."""

def get_version((*args)):

def get_requirements((*args)):
    """Get requirements from pip requirement files."""


</documents>